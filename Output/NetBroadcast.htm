<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\NetBroadcast.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\NetBroadcast.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Sep 17 17:52:18 2018
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; NetPro &rArr; NetIntProcess &rArr; HandleTcpData &rArr; HandleCmd &rArr; NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[13d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from uart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from uart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from w5500.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">FilterSwitcher</a> from switcher.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">ReadAllPekingPowerRecord</a> from pekingpower.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[4f]">ReadAllSetValue</a> from ipd_zjm.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[4b]">ReadDetailIPDRecord</a> from ipd_zjm.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[4a]">ReadIPDRecord</a> from ipd_zjm.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[4e]">ReadPekingPowerRecord</a> from pekingpower.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">SwitcherOnlineCheck</a> from switcher.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from cpu.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from cpu.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from cpu.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from uart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from can.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">WriteIPDRecord</a> from ipd_zjm.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[4c]">WritePkPowerRecord</a> from pekingpower.o(.text) referenced from devicemanger.o(.text)
 <LI><a href="#[53]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[56]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[149]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14a]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[57]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[14b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[14c]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[150]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[151]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[152]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[153]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[154]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[155]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[156]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[157]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[158]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[159]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[160]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[60]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[161]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[162]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[163]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[164]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[166]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[55]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[168]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[58]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[5a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[169]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; NetPro &rArr; NetIntProcess &rArr; HandleTcpData &rArr; HandleCmd &rArr; NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[13e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[61]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[13b]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[b8]"></a>CheckTriggerStatus</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckTriggerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>CheckLianDongInfo</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CheckLianDongInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitherCtrInfoDeal
</UL>

<P><STRONG><a name="[ab]"></a>CheckPowerIndex</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, canpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPowerInfo
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePowerInfo
</UL>

<P><STRONG><a name="[82]"></a>FilterPowerAddr</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, canpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePowerRecord
</UL>

<P><STRONG><a name="[7b]"></a>MakeCanBusStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, canpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeMASWirelessSensor
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitcherDataDeal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSensorCanData
</UL>

<P><STRONG><a name="[72]"></a>CanBusBelong</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, canpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLianDong
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendInitInfo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInfoToCanOrRs485
</UL>

<P><STRONG><a name="[63]"></a>CheckCanTxBufMcp2515</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegCan
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN23
</UL>

<P><STRONG><a name="[65]"></a>SendDataCAN23</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegCan
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBurstRegCan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCanTxBufMcp2515
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>

<P><STRONG><a name="[6a]"></a>CheckCanTxBuf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, canpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN1
</UL>

<P><STRONG><a name="[69]"></a>SendDataCAN1</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SendDataCAN1
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanIdSwitch
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCanTxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>

<P><STRONG><a name="[6c]"></a>CanSendData</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN23
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLianDong
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendInitInfo
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak3_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncTime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInfoToCanOrRs485
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IpdControlDeal
</UL>

<P><STRONG><a name="[6d]"></a>IpdControlDeal</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IpdControlDeal &rArr; CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFeimoCanId
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufCopy
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufClear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInfoToCanOrRs485
</UL>

<P><STRONG><a name="[73]"></a>MakeFramID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MakeFramID
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLianDong
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendInitInfo
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak3_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncTime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInfoToCanOrRs485
</UL>

<P><STRONG><a name="[71]"></a>NetInfoToCanOrRs485</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IpdControlDeal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusBelong
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[76]"></a>TimeChange</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, canpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerBasePara
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSensorRecord
</UL>

<P><STRONG><a name="[75]"></a>WriteSensorRecord</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteSensorRecord &rArr; UpdateWptr &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWptr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumAll
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWriteBurstByte
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSensorCanData
</UL>

<P><STRONG><a name="[7a]"></a>MakeSensorCanData</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MakeSensorCanData &rArr; WriteSensorRecord &rArr; UpdateWptr &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSensorRecord
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCanBusStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[7c]"></a>CheckCrc</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CheckCrc &rArr; CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInitInfo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusBelong
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitcherDataDeal
</UL>

<P><STRONG><a name="[7f]"></a>AckFunc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AckFunc &rArr; CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[80]"></a>SyncTime</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SyncTime &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[88]"></a>CheckTime</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CheckTime
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[81]"></a>WritePowerRecord</STRONG> (Thumb, 106 bytes, Stack size 28 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WritePowerRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterPowerAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[83]"></a>SendBreak3_0</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SendBreak3_0 &rArr; CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSet3_0Break
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[84]"></a>SwitherCtrInfoDeal</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SwitherCtrInfoDeal &rArr; CheckLianDongInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLianDongInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[86]"></a>SwitcherDataDeal</STRONG> (Thumb, 608 bytes, Stack size 64 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SwitcherDataDeal &rArr; CheckCrc &rArr; CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCanBusStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[87]"></a>HandleCanData</STRONG> (Thumb, 2318 bytes, Stack size 32 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = HandleCanData &rArr; SyncTime &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInfoToNet
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitcherDataDeal
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitherCtrInfoDeal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak3_0
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePowerRecord
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTime
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncTime
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckFunc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeSensorCanData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSensorRecord
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCanBusStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckLianDongInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1RecvFunc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMcp2515RecFunc
</UL>

<P><STRONG><a name="[8a]"></a>CanMcp2515RecFunc</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = CanMcp2515RecFunc &rArr; HandleCanData &rArr; SyncTime &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegCan
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBurstRegCan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro
</UL>

<P><STRONG><a name="[8c]"></a>CanPro</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CanPro &rArr; CanMcp2515RecFunc &rArr; HandleCanData &rArr; SyncTime &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can3Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1RecvFunc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMcp2515RecFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>CanSendInitInfo</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CanSendInitInfo &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusBelong
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>SendLianDong</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, canpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SendLianDong &rArr; CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFramID
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBusBelong
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>MakeMASWirelessSensor</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, canpro.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCanBusStatus
</UL>

<P><STRONG><a name="[16c]"></a>ShiftTimeDiff</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, canpro.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>WriteConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWriteBurstByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanCrcCntInfo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetIp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetResetTimes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerFactoryTime
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetMac
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnawerSetUdp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerForBootLoader
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRptr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFilterTime
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultMAC
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultIpAddr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWptr
</UL>

<P><STRONG><a name="[96]"></a>ConfigCheck</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInitCrc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInitLen
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultCrcCnt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultFilterTime
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultWritePtr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultReadPtr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultResetTimes
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultMAC
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultUdp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultGateWayIp
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFactoryTime
</UL>

<P><STRONG><a name="[99]"></a>ReadFactoryTime</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadFactoryTime &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerBasePara
</UL>

<P><STRONG><a name="[b0]"></a>ReadDefaultAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[9a]"></a>ReadDefaultIpAddr</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadDefaultIpAddr &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerIpAddr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[9b]"></a>ReadDefaultGateWayIp</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultGateWayIp &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerIpAddr
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[9c]"></a>ReadDefaultUdp</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultUdp &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[9d]"></a>ReadDefaultMAC</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadDefaultMAC &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[9e]"></a>ReadDefaultResetTimes</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultResetTimes &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[9f]"></a>ReadDefaultReadPtr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultReadPtr &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[a0]"></a>ReadDefaultWritePtr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultWritePtr &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[a1]"></a>ReadDefaultFilterTime</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultFilterTime &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[a2]"></a>UpdateFilterTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UpdateFilterTime &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetNetFilterTime
</UL>

<P><STRONG><a name="[a3]"></a>ReadDefaultCrcCnt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultCrcCnt &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[a4]"></a>UpdateRptr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UpdateRptr &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanRWptr
</UL>

<P><STRONG><a name="[79]"></a>UpdateWptr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UpdateWptr &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanRWptr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSensorRecord
</UL>

<P><STRONG><a name="[a5]"></a>ReadDefaultInitLen</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultInitLen &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
</UL>

<P><STRONG><a name="[a6]"></a>ReadDefaultInitCrc</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadDefaultInitCrc &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
</UL>

<P><STRONG><a name="[a7]"></a>UpdateDeviceInfo</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateDeviceInfo &rArr; ReadTime &rArr; TIM_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecTickDiff
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>UpdatePowerInfo</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPowerIndex
</UL>

<P><STRONG><a name="[ac]"></a>CalDeviceCrc</STRONG> (Thumb, 752 bytes, Stack size 304 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CalDeviceCrc &rArr; CalCrc16 &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
</UL>

<P><STRONG><a name="[ad]"></a>ReadDeviceDefine</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadDeviceDefine &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
</UL>

<P><STRONG><a name="[ae]"></a>ReadDefaultInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = ReadDefaultInit &rArr; CalDeviceCrc &rArr; CalCrc16 &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceDefine
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDeviceCrc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInitCrc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInitLen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
</UL>

<P><STRONG><a name="[af]"></a>ReadDefaultConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ReadDefaultConfig &rArr; ReadDefaultInit &rArr; CalDeviceCrc &rArr; CalCrc16 &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultCrcCnt
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultFilterTime
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultWritePtr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultReadPtr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultResetTimes
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultMAC
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultUdp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultGateWayIp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultIpAddr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultAddr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSensorRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>ReadInitInfo</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReadInitInfo &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
</UL>

<P><STRONG><a name="[b1]"></a>ReadRecord</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadRecord &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
</UL>

<P><STRONG><a name="[b3]"></a>FlashRunLed</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>

<P><STRONG><a name="[5d]"></a>main</STRONG> (Thumb, 336 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = main &rArr; NetPro &rArr; NetIntProcess &rArr; HandleTcpData &rArr; HandleCmd &rArr; NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePro
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485Pro
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMangerInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceInfo
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendLianDong
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendInitInfo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTriggerStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>MakeFrameHeader</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerUnRegisterInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckCrcCntInfo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcFail
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcInfo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerIpAddr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerBasePara
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSoftVerb
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckMac
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckNetFilterTime
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPowerInfo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerExcuteList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetPkPowerInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetIPDInfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErrorBitsInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCycleSec
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerWrongAck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInfoToNet
</UL>

<P><STRONG><a name="[bc]"></a>AnswerWrongAck</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerWrongAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecBuf
</UL>

<P><STRONG><a name="[bf]"></a>AnswerCycleSec</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerCycleSec &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTcpData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c0]"></a>AnswerAck</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanCrcCntInfo
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerResetCrcFail
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetIp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetResetTimes
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetTime
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerFactoryTime
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanRWptr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetMac
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetNetFilterTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanRecTimes
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanNetCrc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSet3_0Break
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerReseetNet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnawerSetUdp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerForBootLoader
</UL>

<P><STRONG><a name="[c1]"></a>AnswerErrorBitsInfo</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerErrorBitsInfo &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c2]"></a>AnswerGetIPDInfo</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerGetIPDInfo &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c3]"></a>AnswerForBootLoader</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerForBootLoader &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c5]"></a>AnswerGetPkPowerInfo</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerGetPkPowerInfo &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[e5]"></a>AnswerSetDebugSocket</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c6]"></a>AnswerExcuteList</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerExcuteList &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c7]"></a>AnswerPowerInfo</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnswerPowerInfo &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPowerIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c8]"></a>AnawerSetUdp</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnawerSetUdp &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[c9]"></a>AnswerReseetNet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerReseetNet &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[e4]"></a>AnswerSetBiaoJiao</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[ca]"></a>AnswerCheckNetFilterTime</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerCheckNetFilterTime &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[cb]"></a>AnswerSet3_0Break</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AnswerSet3_0Break &rArr; SendBreak3_0 &rArr; CanSendData &rArr; SendDataCAN23 &rArr; CheckCanTxBufMcp2515 &rArr; ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBreak3_0
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[cc]"></a>AnswerCleanNetCrc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerCleanNetCrc &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[cd]"></a>AnswerCleanRecTimes</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerCleanRecTimes &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[ce]"></a>AnswerSetNetFilterTime</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnswerSetNetFilterTime &rArr; UpdateFilterTime &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFilterTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[cf]"></a>AnswerCheckMac</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerCheckMac &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d0]"></a>AnswerSetMac</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerSetMac &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d1]"></a>AnswerCleanRWptr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnswerCleanRWptr &rArr; UpdateRptr &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRptr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateWptr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d2]"></a>AnswerFactoryTime</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AnswerFactoryTime &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d3]"></a>AnswerSetTime</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerSetTime &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d5]"></a>AnswerSetResetTimes</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerSetResetTimes &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d6]"></a>AnswerSetIp</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerSetIp &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d7]"></a>AnswerSoftVerb</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerSoftVerb &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d8]"></a>AnswerBasePara</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AnswerBasePara &rArr; ReadFactoryTime &rArr; ConfigCheck &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFactoryTime
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[d9]"></a>AnswerIpAddr</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AnswerIpAddr &rArr; ReadDefaultIpAddr &rArr; WriteConfig &rArr; FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultGateWayIp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultIpAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[da]"></a>AnswerCrcInfo</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerCrcInfo &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[db]"></a>AnswerResetCrcFail</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerResetCrcFail &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[dc]"></a>AnswerCrcFail</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerCrcFail &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[dd]"></a>AnswerCleanCrcCntInfo</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerCleanCrcCntInfo &rArr; AnswerAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[de]"></a>AnswerCheckCrcCntInfo</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AnswerCheckCrcCntInfo &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[df]"></a>AnswerUnRegisterInfo</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AnswerUnRegisterInfo &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[e1]"></a>CalPtrLen</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, netpro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
</UL>

<P><STRONG><a name="[e0]"></a>AnswerCurInfo</STRONG> (Thumb, 942 bytes, Stack size 144 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AnswerCurInfo &rArr; ReadRecord &rArr; FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalPtrLen
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufCopy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeChange
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[e2]"></a>CheckRecBuf</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CheckRecBuf &rArr; AnswerWrongAck &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerWrongAck
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
</UL>

<P><STRONG><a name="[e3]"></a>HandleCmd</STRONG> (Thumb, 768 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = HandleCmd &rArr; NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecBuf
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerUnRegisterInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckCrcCntInfo
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanCrcCntInfo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcFail
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerResetCrcFail
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcInfo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerIpAddr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerBasePara
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSoftVerb
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetIp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetResetTimes
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetTime
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerFactoryTime
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanRWptr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetMac
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckMac
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetNetFilterTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanRecTimes
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCleanNetCrc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSet3_0Break
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckNetFilterTime
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetBiaoJiao
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerReseetNet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnawerSetUdp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPowerInfo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerExcuteList
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetDebugSocket
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetPkPowerInfo
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerForBootLoader
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetIPDInfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErrorBitsInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCycleSec
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerWrongAck
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRptr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWriteBurstByte
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInfoToCanOrRs485
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTcpData
</UL>

<P><STRONG><a name="[e6]"></a>HandleTcpData</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = HandleTcpData &rArr; HandleCmd &rArr; NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCycleSec
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
</UL>

<P><STRONG><a name="[e7]"></a>NetIntProcess</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = NetIntProcess &rArr; HandleTcpData &rArr; HandleCmd &rArr; NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReg1Byte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Lisen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket1Byte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReg1Byte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleTcpData
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[ba]"></a>NetPro</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = NetPro &rArr; NetIntProcess &rArr; HandleTcpData &rArr; HandleCmd &rArr; NetInfoToCanOrRs485 &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Udp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Lisen
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReg1Byte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNetParameters
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>CanInfoToNet</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CanInfoToNet &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeFrameHeader
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>

<P><STRONG><a name="[74]"></a>SendDebugData</STRONG> (Thumb, 310 bytes, Stack size 280 bytes, netpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRs485Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataFromDMA
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendInitInfo
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncTime
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetInfoToCanOrRs485
</UL>

<P><STRONG><a name="[113]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Read_Byte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Send_Byte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_NAck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Ack
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramSendByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramNAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramAck
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramStop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramStart
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FmInit
</UL>

<P><STRONG><a name="[7d]"></a>MsTickDiff</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitcherOnlineCheck
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma1Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2515Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRegisterConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Udp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Lisen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNetParameters
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePro
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485Pro
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashRunLed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanSendInitInfo
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCrc
</UL>

<P><STRONG><a name="[a9]"></a>SecTickDiff</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceInfo
</UL>

<P><STRONG><a name="[f2]"></a>CRC16</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>

<P><STRONG><a name="[95]"></a>CalCrc16</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CalCrc16 &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCycleBuf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerUnRegisterInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckCrcCntInfo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcFail
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcInfo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerIpAddr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerBasePara
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSoftVerb
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckMac
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckNetFilterTime
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPowerInfo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerExcuteList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetPkPowerInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetIPDInfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErrorBitsInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCycleSec
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerWrongAck
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalDeviceCrc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultMAC
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInfoToNet
</UL>

<P><STRONG><a name="[98]"></a>CRC16Check</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CRC16Check &rArr; CalCrc16 &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRs485Data
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckRecBuf
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
</UL>

<P><STRONG><a name="[77]"></a>SumAll</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SumAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumCheck
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSensorRecord
</UL>

<P><STRONG><a name="[b2]"></a>SumCheck</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SumCheck &rArr; SumAll
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SumAll
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
</UL>

<P><STRONG><a name="[70]"></a>BufCopy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultIpAddr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IpdControlDeal
</UL>

<P><STRONG><a name="[6f]"></a>BufClear</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, public.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRs485Data
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IpdControlDeal
</UL>

<P><STRONG><a name="[6e]"></a>MakeFeimoCanId</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, public.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MakeFeimoCanId
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IpdControlDeal
</UL>

<P><STRONG><a name="[f3]"></a>Compare</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, voicepro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePro
</UL>

<P><STRONG><a name="[b9]"></a>VoicePro</STRONG> (Thumb, 626 bytes, Stack size 16 bytes, voicepro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VoicePro &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Compare
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f4]"></a>Send485DataFromDMA</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, voicepro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Send485DataFromDMA &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485Pro
</UL>

<P><STRONG><a name="[f7]"></a>CheckCycleIndex</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, voicepro.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485Pro
</UL>

<P><STRONG><a name="[16d]"></a>Make485FramHeader</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, voicepro.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>MakeCycleBuf</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, voicepro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MakeCycleBuf &rArr; CalCrc16 &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485Pro
</UL>

<P><STRONG><a name="[f6]"></a>HandleRs485Data</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, voicepro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HandleRs485Data &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16Check
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufClear
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rs485Pro
</UL>

<P><STRONG><a name="[bb]"></a>Rs485Pro</STRONG> (Thumb, 340 bytes, Stack size 8 bytes, voicepro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Rs485Pro &rArr; HandleRs485Data &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRs485Data
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeCycleBuf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCycleIndex
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send485DataFromDMA
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>Socket_Udp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Socket_Udp &rArr; WriteSocket2Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket2Byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket1Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[fa]"></a>CanBaudValue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CanBaudValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRegisterConfig
</UL>

<P><STRONG><a name="[fb]"></a>CAN_IO_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Init
</UL>

<P><STRONG><a name="[f9]"></a>CanRegisterConfig</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CanRegisterConfig &rArr; CanBaudValue
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanBaudValue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Init
</UL>

<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CanIdSwitch</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN1
</UL>

<P><STRONG><a name="[90]"></a>Can1RecvFunc</STRONG> (Thumb, 588 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Can1RecvFunc &rArr; HandleCanData &rArr; SyncTime &rArr; SendDebugData &rArr; SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCanData
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro
</UL>

<P><STRONG><a name="[8d]"></a>Can1Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Can1Init &rArr; CanRegisterConfig &rArr; CanBaudValue
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanRegisterConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro
</UL>

<P><STRONG><a name="[103]"></a>SET_CS</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515Reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegCan
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBurstRegCan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegCan
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBurstRegCan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg
</UL>

<P><STRONG><a name="[fd]"></a>CLR_SCLK</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
</UL>

<P><STRONG><a name="[101]"></a>GetMISO</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
</UL>

<P><STRONG><a name="[100]"></a>SET_SCLK</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
</UL>

<P><STRONG><a name="[ff]"></a>CLR_MOSI</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
</UL>

<P><STRONG><a name="[fe]"></a>SET_MOSI</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
</UL>

<P><STRONG><a name="[fc]"></a>SendByteCan</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_MOSI
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_MOSI
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SCLK
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMISO
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_SCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515Reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegCan
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBurstRegCan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegCan
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBurstRegCan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg
</UL>

<P><STRONG><a name="[102]"></a>CLR_CS</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515Reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegCan
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBurstRegCan
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRegCan
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBurstRegCan
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModifyReg
</UL>

<P><STRONG><a name="[66]"></a>WriteRegCan</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_CS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2515Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN23
</UL>

<P><STRONG><a name="[104]"></a>MCP2515Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCP2515Reset &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_CS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2515Init
</UL>

<P><STRONG><a name="[105]"></a>Mcp2515Init</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mcp2515Init &rArr; WriteRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCP2515Reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRegCan
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can3Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Init
</UL>

<P><STRONG><a name="[8e]"></a>Can2Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Can2Init &rArr; Mcp2515Init &rArr; WriteRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2515Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro
</UL>

<P><STRONG><a name="[8f]"></a>Can3Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Can3Init &rArr; Mcp2515Init &rArr; WriteRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mcp2515Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanPro
</UL>

<P><STRONG><a name="[67]"></a>WriteBurstRegCan</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteBurstRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_CS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN23
</UL>

<P><STRONG><a name="[64]"></a>ReadRegCan</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_CS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMcp2515RecFunc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckCanTxBufMcp2515
</UL>

<P><STRONG><a name="[8b]"></a>ReadBurstRegCan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReadBurstRegCan &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_CS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMcp2515RecFunc
</UL>

<P><STRONG><a name="[68]"></a>ModifyReg</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ModifyReg &rArr; SendByteCan
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_CS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CS
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMcp2515RecFunc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataCAN23
</UL>

<P><STRONG><a name="[106]"></a>ReadStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLR_CS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByteCan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_CS
</UL>

<P><STRONG><a name="[107]"></a>ClockInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClockInit
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[10d]"></a>LedIoInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[109]"></a>Timer4Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer4Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[10b]"></a>Timer2Init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer2Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[10c]"></a>Timer3Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer3Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[b4]"></a>CpuInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CpuInit &rArr; UartInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD2068Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FmInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma2Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma1Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedIoInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>IWDG_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>IWDG_Feed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, cpu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>FmInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[114]"></a>FramStart</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FramStart
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWriteBurstByte
</UL>

<P><STRONG><a name="[115]"></a>FramStop</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FramStop
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWriteBurstByte
</UL>

<P><STRONG><a name="[116]"></a>FramAck</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FramAck
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWriteBurstByte
</UL>

<P><STRONG><a name="[117]"></a>FramNAck</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FramNAck
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
</UL>

<P><STRONG><a name="[118]"></a>FramSendByte</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWriteBurstByte
</UL>

<P><STRONG><a name="[119]"></a>FramReadByte</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadBurstByte
</UL>

<P><STRONG><a name="[78]"></a>FramWriteBurstByte</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FramWriteBurstByte &rArr; FramSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramSendByte
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramAck
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramStop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSensorRecord
</UL>

<P><STRONG><a name="[97]"></a>FramReadBurstByte</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fminit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FramReadBurstByte &rArr; FramReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramReadByte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramSendByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramNAck
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramAck
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramStop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerIpAddr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRecord
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDefaultInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDeviceDefine
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCheck
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadInitInfo
</UL>

<P><STRONG><a name="[112]"></a>UartInit</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UartInit &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[110]"></a>Dma1Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Dma1Init &rArr; MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[111]"></a>Dma2Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Dma2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>W5500Reset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W5500Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Init
</UL>

<P><STRONG><a name="[126]"></a>W5500IoInit</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, w5500.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Init
</UL>

<P><STRONG><a name="[120]"></a>SendByte</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, w5500.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBurstReg
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReg2Byte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket4Byte
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket2Byte
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBurstReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReg2Byte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket2Byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReg1Byte
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket1Byte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadReg1Byte
</UL>

<P><STRONG><a name="[c4]"></a>WriteSocket1Byte</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteSocket1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Udp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Lisen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNetParameters
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerForBootLoader
</UL>

<P><STRONG><a name="[e9]"></a>WriteReg1Byte</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WriteReg1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNetParameters
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
</UL>

<P><STRONG><a name="[121]"></a>WriteReg2Byte</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WriteReg2Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNetParameters
</UL>

<P><STRONG><a name="[122]"></a>WriteBurstReg</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBurstReg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNetParameters
</UL>

<P><STRONG><a name="[ee]"></a>LoadNetParameters</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoadNetParameters &rArr; WriteBurstReg
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBurstReg
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReg2Byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteReg1Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[ef]"></a>DetectGateway</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DetectGateway &rArr; WriteSocket1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[ea]"></a>ReadSocket1Byte</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadSocket1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Connect
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Udp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Lisen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
</UL>

<P><STRONG><a name="[f8]"></a>WriteSocket2Byte</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WriteSocket2Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Udp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socket_Lisen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketData
</UL>

<P><STRONG><a name="[eb]"></a>Socket_Lisen</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Socket_Lisen &rArr; WriteSocket2Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket2Byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket1Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[123]"></a>Socket_Connect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket1Byte
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>

<P><STRONG><a name="[124]"></a>ReadSocket2Byte</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadSocket2Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketData
</UL>

<P><STRONG><a name="[125]"></a>WriteSocket4Byte</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSocketData
</UL>

<P><STRONG><a name="[be]"></a>SendSocketData</STRONG> (Thumb, 262 bytes, Stack size 28 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendSocketData &rArr; WriteSocket4Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket4Byte
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket2Byte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket2Byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCurInfo
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerUnRegisterInfo
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckCrcCntInfo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcFail
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCrcInfo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerIpAddr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerBasePara
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSoftVerb
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckMac
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCheckNetFilterTime
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerPowerInfo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerExcuteList
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetPkPowerInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerGetIPDInfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerErrorBitsInfo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerAck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerCycleSec
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerWrongAck
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoicePro
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanInfoToNet
</UL>

<P><STRONG><a name="[ec]"></a>ReadSocketData</STRONG> (Thumb, 258 bytes, Stack size 28 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadSocketData &rArr; ReadSocket2Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket2Byte
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket2Byte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
</UL>

<P><STRONG><a name="[ed]"></a>W5500Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W5500Init &rArr; W5500Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500IoInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[e8]"></a>ReadReg1Byte</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, w5500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ReadReg1Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetIntProcess
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetPro
</UL>

<P><STRONG><a name="[127]"></a>ReadReg2Byte</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>

<P><STRONG><a name="[128]"></a>ReadBurstReg</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, w5500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendByte
</UL>

<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, w5500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>SD2068Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sd2068.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CpuInit
</UL>

<P><STRONG><a name="[129]"></a>TIM_Start</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[12a]"></a>TIM_Stop</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOn
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Wait_ACK
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[12b]"></a>TIM_Wait_ACK</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Wait_ACK &rArr; TIM_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[12c]"></a>TIM_Ack</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[12d]"></a>TIM_NAck</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_NAck
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[12e]"></a>TIM_Send_Byte</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[12f]"></a>TIM_Read_Byte</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTime
</UL>

<P><STRONG><a name="[a8]"></a>ReadTime</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadTime &rArr; TIM_Read_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Read_Byte
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Send_Byte
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_NAck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Wait_ACK
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateDeviceInfo
</UL>

<P><STRONG><a name="[130]"></a>WriteOn</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteOn &rArr; TIM_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Send_Byte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Wait_ACK
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
</UL>

<P><STRONG><a name="[131]"></a>WriteOff</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteOff &rArr; TIM_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Send_Byte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Wait_ACK
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTime
</UL>

<P><STRONG><a name="[d4]"></a>WriteTime</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, sd2068.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteTime &rArr; WriteOff &rArr; TIM_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOff
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteOn
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Send_Byte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Wait_ACK
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Stop
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnswerSetTime
</UL>

<P><STRONG><a name="[133]"></a>CheckIPDIndex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ipd_zjm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadAllSetValue
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDetailIPDRecord
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIPDRecord
</UL>

<P><STRONG><a name="[132]"></a>FilterIPDAddr</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, ipd_zjm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteIPDRecord
</UL>

<P><STRONG><a name="[49]"></a>WriteIPDRecord</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ipd_zjm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WriteIPDRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterIPDAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[16e]"></a>TimeSwitch</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ipd_zjm.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>ReadIPDRecord</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, ipd_zjm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadIPDRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIPDIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[4b]"></a>ReadDetailIPDRecord</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ipd_zjm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadDetailIPDRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIPDIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>ReadAllSetValue</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, ipd_zjm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReadAllSetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIPDIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>CheckPkPowerIndex</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pekingpower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPekingPowerRecord
</UL>

<P><STRONG><a name="[134]"></a>FilterPkPowerAddr</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, pekingpower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePkPowerRecord
</UL>

<P><STRONG><a name="[4c]"></a>WritePkPowerRecord</STRONG> (Thumb, 316 bytes, Stack size 28 bytes, pekingpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = WritePkPowerRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterPkPowerAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>ReadAllPekingPowerRecord</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, pekingpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ReadAllPekingPowerRecord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>ReadPekingPowerRecord</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pekingpower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadPekingPowerRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckPkPowerIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>DeviceMangerInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, devicemanger.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeviceMangerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchersInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>SwitchersInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, switcher.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceMangerInit
</UL>

<P><STRONG><a name="[50]"></a>FilterSwitcher</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, switcher.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>SwitcherOnlineCheck</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, switcher.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SwitcherOnlineCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsTickDiff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> devicemanger.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[137]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_Init
</UL>

<P><STRONG><a name="[10a]"></a>MY_NVIC_Init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MY_NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma1Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4Init
</UL>

<P><STRONG><a name="[16f]"></a>Ex_NVIC_Config</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>MYRCC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>

<P><STRONG><a name="[13a]"></a>Sys_Standby</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>

<P><STRONG><a name="[170]"></a>Sys_Soft_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>JTAG_Set</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>Stm32_Clock_Init</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockInit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDebugData
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[178]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[179]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[17a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[13f]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[143]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[144]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[17e]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[145]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[142]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[141]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[146]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[148]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[147]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[140]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
